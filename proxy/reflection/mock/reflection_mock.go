// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mercari/grpc-http-proxy/proxy/reflection (interfaces: Reflector,Message)

// Package mock_reflection is a generated GoMock package.
package mock_reflection

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	proto "github.com/golang/protobuf/proto"
	dynamic "github.com/jhump/protoreflect/dynamic"
	reflection "github.com/mercari/grpc-http-proxy/proxy/reflection"
	reflect "reflect"
)

// MockReflector is a mock of Reflector interface
type MockReflector struct {
	ctrl     *gomock.Controller
	recorder *MockReflectorMockRecorder
}

// MockReflectorMockRecorder is the mock recorder for MockReflector
type MockReflectorMockRecorder struct {
	mock *MockReflector
}

// NewMockReflector creates a new mock instance
func NewMockReflector(ctrl *gomock.Controller) *MockReflector {
	mock := &MockReflector{ctrl: ctrl}
	mock.recorder = &MockReflectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockReflector) EXPECT() *MockReflectorMockRecorder {
	return m.recorder
}

// CreateInvocation mocks base method
func (m *MockReflector) CreateInvocation(arg0 context.Context, arg1, arg2 string, arg3 []byte) (*reflection.MethodInvocation, error) {
	ret := m.ctrl.Call(m, "CreateInvocation", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*reflection.MethodInvocation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInvocation indicates an expected call of CreateInvocation
func (mr *MockReflectorMockRecorder) CreateInvocation(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInvocation", reflect.TypeOf((*MockReflector)(nil).CreateInvocation), arg0, arg1, arg2, arg3)
}

// MockMessage is a mock of Message interface
type MockMessage struct {
	ctrl     *gomock.Controller
	recorder *MockMessageMockRecorder
}

// MockMessageMockRecorder is the mock recorder for MockMessage
type MockMessageMockRecorder struct {
	mock *MockMessage
}

// NewMockMessage creates a new mock instance
func NewMockMessage(ctrl *gomock.Controller) *MockMessage {
	mock := &MockMessage{ctrl: ctrl}
	mock.recorder = &MockMessageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMessage) EXPECT() *MockMessageMockRecorder {
	return m.recorder
}

// AsProtoreflectMessage mocks base method
func (m *MockMessage) AsProtoreflectMessage() *dynamic.Message {
	ret := m.ctrl.Call(m, "AsProtoreflectMessage")
	ret0, _ := ret[0].(*dynamic.Message)
	return ret0
}

// AsProtoreflectMessage indicates an expected call of AsProtoreflectMessage
func (mr *MockMessageMockRecorder) AsProtoreflectMessage() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AsProtoreflectMessage", reflect.TypeOf((*MockMessage)(nil).AsProtoreflectMessage))
}

// ConvertFrom mocks base method
func (m *MockMessage) ConvertFrom(arg0 proto.Message) error {
	ret := m.ctrl.Call(m, "ConvertFrom", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConvertFrom indicates an expected call of ConvertFrom
func (mr *MockMessageMockRecorder) ConvertFrom(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertFrom", reflect.TypeOf((*MockMessage)(nil).ConvertFrom), arg0)
}

// MarshalJSON mocks base method
func (m *MockMessage) MarshalJSON() ([]byte, error) {
	ret := m.ctrl.Call(m, "MarshalJSON")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalJSON indicates an expected call of MarshalJSON
func (mr *MockMessageMockRecorder) MarshalJSON() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalJSON", reflect.TypeOf((*MockMessage)(nil).MarshalJSON))
}

// UnmarshalJSON mocks base method
func (m *MockMessage) UnmarshalJSON(arg0 []byte) error {
	ret := m.ctrl.Call(m, "UnmarshalJSON", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnmarshalJSON indicates an expected call of UnmarshalJSON
func (mr *MockMessageMockRecorder) UnmarshalJSON(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnmarshalJSON", reflect.TypeOf((*MockMessage)(nil).UnmarshalJSON), arg0)
}
