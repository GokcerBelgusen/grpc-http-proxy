// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mercari/grpc-http-proxy/proxy/reflection (interfaces: ReflectionClient,ServiceDescriptor,MethodDescriptor,MessageDescriptor,Message)

// Package mock_reflection is a generated GoMock package.
package mock_reflection

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	proto "github.com/golang/protobuf/proto"
	desc "github.com/jhump/protoreflect/desc"
	dynamic "github.com/jhump/protoreflect/dynamic"
	reflection "github.com/mercari/grpc-http-proxy/proxy/reflection"
	reflect "reflect"
)

// MockReflectionClient is a mock of ReflectionClient interface
type MockReflectionClient struct {
	ctrl     *gomock.Controller
	recorder *MockReflectionClientMockRecorder
}

// MockReflectionClientMockRecorder is the mock recorder for MockReflectionClient
type MockReflectionClientMockRecorder struct {
	mock *MockReflectionClient
}

// NewMockReflectionClient creates a new mock instance
func NewMockReflectionClient(ctrl *gomock.Controller) *MockReflectionClient {
	mock := &MockReflectionClient{ctrl: ctrl}
	mock.recorder = &MockReflectionClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockReflectionClient) EXPECT() *MockReflectionClientMockRecorder {
	return m.recorder
}

// ResolveService mocks base method
func (m *MockReflectionClient) ResolveService(arg0 context.Context, arg1 string) (reflection.ServiceDescriptor, error) {
	ret := m.ctrl.Call(m, "ResolveService", arg0, arg1)
	ret0, _ := ret[0].(reflection.ServiceDescriptor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveService indicates an expected call of ResolveService
func (mr *MockReflectionClientMockRecorder) ResolveService(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveService", reflect.TypeOf((*MockReflectionClient)(nil).ResolveService), arg0, arg1)
}

// MockServiceDescriptor is a mock of ServiceDescriptor interface
type MockServiceDescriptor struct {
	ctrl     *gomock.Controller
	recorder *MockServiceDescriptorMockRecorder
}

// MockServiceDescriptorMockRecorder is the mock recorder for MockServiceDescriptor
type MockServiceDescriptorMockRecorder struct {
	mock *MockServiceDescriptor
}

// NewMockServiceDescriptor creates a new mock instance
func NewMockServiceDescriptor(ctrl *gomock.Controller) *MockServiceDescriptor {
	mock := &MockServiceDescriptor{ctrl: ctrl}
	mock.recorder = &MockServiceDescriptorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockServiceDescriptor) EXPECT() *MockServiceDescriptorMockRecorder {
	return m.recorder
}

// FindMethodByName mocks base method
func (m *MockServiceDescriptor) FindMethodByName(arg0 string) (reflection.MethodDescriptor, error) {
	ret := m.ctrl.Call(m, "FindMethodByName", arg0)
	ret0, _ := ret[0].(reflection.MethodDescriptor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMethodByName indicates an expected call of FindMethodByName
func (mr *MockServiceDescriptorMockRecorder) FindMethodByName(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMethodByName", reflect.TypeOf((*MockServiceDescriptor)(nil).FindMethodByName), arg0)
}

// MockMethodDescriptor is a mock of MethodDescriptor interface
type MockMethodDescriptor struct {
	ctrl     *gomock.Controller
	recorder *MockMethodDescriptorMockRecorder
}

// MockMethodDescriptorMockRecorder is the mock recorder for MockMethodDescriptor
type MockMethodDescriptorMockRecorder struct {
	mock *MockMethodDescriptor
}

// NewMockMethodDescriptor creates a new mock instance
func NewMockMethodDescriptor(ctrl *gomock.Controller) *MockMethodDescriptor {
	mock := &MockMethodDescriptor{ctrl: ctrl}
	mock.recorder = &MockMethodDescriptorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMethodDescriptor) EXPECT() *MockMethodDescriptorMockRecorder {
	return m.recorder
}

// AsProtoreflectDescriptor mocks base method
func (m *MockMethodDescriptor) AsProtoreflectDescriptor() *desc.MethodDescriptor {
	ret := m.ctrl.Call(m, "AsProtoreflectDescriptor")
	ret0, _ := ret[0].(*desc.MethodDescriptor)
	return ret0
}

// AsProtoreflectDescriptor indicates an expected call of AsProtoreflectDescriptor
func (mr *MockMethodDescriptorMockRecorder) AsProtoreflectDescriptor() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AsProtoreflectDescriptor", reflect.TypeOf((*MockMethodDescriptor)(nil).AsProtoreflectDescriptor))
}

// GetInputType mocks base method
func (m *MockMethodDescriptor) GetInputType() reflection.MessageDescriptor {
	ret := m.ctrl.Call(m, "GetInputType")
	ret0, _ := ret[0].(reflection.MessageDescriptor)
	return ret0
}

// GetInputType indicates an expected call of GetInputType
func (mr *MockMethodDescriptorMockRecorder) GetInputType() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInputType", reflect.TypeOf((*MockMethodDescriptor)(nil).GetInputType))
}

// GetOutputType mocks base method
func (m *MockMethodDescriptor) GetOutputType() reflection.MessageDescriptor {
	ret := m.ctrl.Call(m, "GetOutputType")
	ret0, _ := ret[0].(reflection.MessageDescriptor)
	return ret0
}

// GetOutputType indicates an expected call of GetOutputType
func (mr *MockMethodDescriptorMockRecorder) GetOutputType() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOutputType", reflect.TypeOf((*MockMethodDescriptor)(nil).GetOutputType))
}

// MockMessageDescriptor is a mock of MessageDescriptor interface
type MockMessageDescriptor struct {
	ctrl     *gomock.Controller
	recorder *MockMessageDescriptorMockRecorder
}

// MockMessageDescriptorMockRecorder is the mock recorder for MockMessageDescriptor
type MockMessageDescriptorMockRecorder struct {
	mock *MockMessageDescriptor
}

// NewMockMessageDescriptor creates a new mock instance
func NewMockMessageDescriptor(ctrl *gomock.Controller) *MockMessageDescriptor {
	mock := &MockMessageDescriptor{ctrl: ctrl}
	mock.recorder = &MockMessageDescriptorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMessageDescriptor) EXPECT() *MockMessageDescriptorMockRecorder {
	return m.recorder
}

// NewMessage mocks base method
func (m *MockMessageDescriptor) NewMessage() reflection.Message {
	ret := m.ctrl.Call(m, "NewMessage")
	ret0, _ := ret[0].(reflection.Message)
	return ret0
}

// NewMessage indicates an expected call of NewMessage
func (mr *MockMessageDescriptorMockRecorder) NewMessage() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewMessage", reflect.TypeOf((*MockMessageDescriptor)(nil).NewMessage))
}

// MockMessage is a mock of Message interface
type MockMessage struct {
	ctrl     *gomock.Controller
	recorder *MockMessageMockRecorder
}

// MockMessageMockRecorder is the mock recorder for MockMessage
type MockMessageMockRecorder struct {
	mock *MockMessage
}

// NewMockMessage creates a new mock instance
func NewMockMessage(ctrl *gomock.Controller) *MockMessage {
	mock := &MockMessage{ctrl: ctrl}
	mock.recorder = &MockMessageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMessage) EXPECT() *MockMessageMockRecorder {
	return m.recorder
}

// AsProtoreflectMessage mocks base method
func (m *MockMessage) AsProtoreflectMessage() *dynamic.Message {
	ret := m.ctrl.Call(m, "AsProtoreflectMessage")
	ret0, _ := ret[0].(*dynamic.Message)
	return ret0
}

// AsProtoreflectMessage indicates an expected call of AsProtoreflectMessage
func (mr *MockMessageMockRecorder) AsProtoreflectMessage() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AsProtoreflectMessage", reflect.TypeOf((*MockMessage)(nil).AsProtoreflectMessage))
}

// ConvertFrom mocks base method
func (m *MockMessage) ConvertFrom(arg0 proto.Message) error {
	ret := m.ctrl.Call(m, "ConvertFrom", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConvertFrom indicates an expected call of ConvertFrom
func (mr *MockMessageMockRecorder) ConvertFrom(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertFrom", reflect.TypeOf((*MockMessage)(nil).ConvertFrom), arg0)
}

// MarshalJSON mocks base method
func (m *MockMessage) MarshalJSON() ([]byte, error) {
	ret := m.ctrl.Call(m, "MarshalJSON")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalJSON indicates an expected call of MarshalJSON
func (mr *MockMessageMockRecorder) MarshalJSON() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalJSON", reflect.TypeOf((*MockMessage)(nil).MarshalJSON))
}

// UnmarshalJSON mocks base method
func (m *MockMessage) UnmarshalJSON(arg0 []byte) error {
	ret := m.ctrl.Call(m, "UnmarshalJSON", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnmarshalJSON indicates an expected call of UnmarshalJSON
func (mr *MockMessageMockRecorder) UnmarshalJSON(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnmarshalJSON", reflect.TypeOf((*MockMessage)(nil).UnmarshalJSON), arg0)
}
